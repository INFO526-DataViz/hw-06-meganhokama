---
title: "Homework 06"
author: "Megan Hokama"
format:
  html:
    embed-resources: true
toc: true
---

```{r}
#| label: setup
#| message: false

# load packages
# add packages as needed

if(!require(pacman))
  install.packages("pacman")

pacman::p_load(
  tidyverse,
  countdown,
  gt,
  readxl,
  gganimate,
  gifski,
  knitr,
  kableExtra,
  palmerpenguins,
  transformr,
  datasauRus,
  viridis,
  here,
  dplyr,
  shiny
)

# set theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))

# set width of code output
options(width = 65)

# set figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 7, # 7" width
  fig.asp = 0.618, # the golden ratio
  fig.retina = 3, # dpi multiplier for displaying HTML output on retina
  fig.align = "center", # center align figures
  dpi = 300 # higher dpi, sharper image
)
```

## 1 - Country populations

```{r}
#| label: redo gganimate plot

#Read data
country_data <- read_csv("data/country-pop.csv")
head(country_data)

#Based on previous, skip = 4
country <- read_csv("data/country-pop.csv", skip = 4)|>
  janitor::clean_names()

country |>
  glimpse()

#Top 10 countries in 2020
top10 <- country[, c("country_name", "x2020")]|>
  arrange(desc(x2020)) |>
  head(55)

top10 |>
  glimpse()

top10 <- country|>  
  filter(country_name %in% c("China","India", "United States", "Indonesia",
                             "Pakistan", "Brazil", "Nigeria", "Bangladesh",
                             "Russian Federation", "Mexico"))

#Pivot data longer
top10year <- top10|>
  pivot_longer(cols = 5:65, names_to = "year",
               values_to = "population")|>
  select("country_name", "population", "year")|>
  mutate(year = substring(year, 2))|>
  mutate(year = as.numeric(year))|>
  group_by(year)|>
  arrange(year, -population)|>
  mutate(rank = 1:n())

top10year |>
  glimpse()

#Create animation plot 
staticplot <- ggplot(top10year, aes(rank, group = country_name,
fill = as.factor(country_name), color = as.factor(country_name))) +
  scale_fill_viridis(discrete = TRUE, option = "plasma")+
  geom_tile(aes(y = population/2,
                height = population,
                width = 0.9), alpha = 0.8, color = "black") +
  geom_text(aes(y = 0, label = paste(country_name, " ")), vjust = 0.4, hjust = 1) +
  geom_text(aes(y = population, label = population, hjust = 0)) +
  coord_flip(clip = "off", expand = FALSE) +
  scale_y_continuous(labels = scales::comma) +
  scale_x_reverse() +
  enter_fade()+
  exit_fade()+
  guides(color = "none", fill = "none") +
  theme(axis.line = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        legend.position = "none",
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.grid.major.x = element_line(linewidth = 0.1, color = "grey"),
        panel.grid.minor.x = element_line(linewidth = 0.1, color = "grey"),
        plot.title = element_text(size = 25, hjust = 0.5, face = "bold", colour = "black", vjust = -1),
        plot.subtitle = element_text(size = 15, hjust = 0.5, face = "italic", color = "black"),
        plot.caption = element_text(size = 10, hjust = 0.5, face = "italic", color = "black"),
        plot.background = element_blank(),
        plot.margin = margin(2, 2, 10, 4, "cm"))

anim <- staticplot + transition_states(year, transition_length = 4, state_length = 1) +
  view_follow(fixed_x = TRUE)  +
  labs(title = 'Population per Year with Top 10 Countries : {closest_state}',
       caption  = "Population | Data Source: The World Bank")

#Create gif
animate(anim, 200, fps = 20,  width = 1200, height = 1000,
        renderer = gifski_renderer("gganim.gif"))
```
I referenced https://www.r-bloggers.com/2020/01/how-to-create-bar-race-animation-charts-in-r/. This helped me develop a gif that shows the top 10 countries populations over time.

## 2 - Meaning of life - The data.
```{r}
#|label: Create dataset

# Create a data frame referencing the data visualization
life_meaning <- data.frame(
  country = c("Australia", "New Zealand", "Sweden", "France", "Greece", 
              "Germany", "Canada", "Singapore", "Italy", "Netherlands", 
              "Belgium", "Japan", "UK", "U.S.", "Spain", "South Korea", 
              "Taiwan"),
  First_Choice = c("Family", "Family", "Family", "Family", "Family", 
                   "Family", "Family", "Family", "Family", 
                   "Family", "Family", "Family", "Family", "Family", 
                   "Health", "Material well-being", "Society"),
  Second_Choice = c("Occupation", "Occupation", "Occupation", "Occupation", 
                    "Occupation", "Occupation", "Occupation", 
                    "Occupation", "Occupation", "Material well-being", 
                    "Material well-being", "Material well-being", "Friends", 
                    "Friends", "Material well-being", "Health", 
                    "Material well-being"),
  Third_Choice = c("Friends", "Friends", "Friends", "Health", "Health", 
                   "Health", "Material well-being", "Society", 
                   "Material well-being", "Health", "Occupation", 
                   "Occupation", "Hobbies", "Hobbies", "Occupation", 
                   "Family", "Family"),
  Fourth_Choice = c("Material well-being", "Material well-being", 
                    "Material well-being", "Material well-being", 
                    "Friends", "Material well-being", 
                    "Friends", "Material well-being", "Health", "Friends", 
                    "Health", "Health", "Occupation", "Occupation", 
                    "Family", "General Positive", "Freedom"),
  Fifth_Choice = c("Society", "Society", "Health", 
                   "Friends", "Hobbies", "General Positive", 
                   "Society", "Friends", "Friends", "Occupation", "Friends", 
                   "Hobbies", "Health", "Faith", "Society", "Society", 
                   "Hobbies")
)

# Save the data frame to a CSV file using the write.csv command
write.csv(life_meaning, file = "data/life_meaning.csv", row.names = FALSE)

life_meaning <- read_csv("data/life_meaning.csv")

```


## 3 - Meaning of life - The visualization.
```{r}
#|label: Create alternative visualization
#Pivot longer 
life_meaning_long <- tidyr::gather(life_meaning, key = "Choice_Order", value = "Choice", -country)

#Order the Choice variable so that it shows arranges in frequency count
life_meaning_long$Choice <- factor(life_meaning_long$Choice, levels = names(sort(table(life_meaning_long$Choice), decreasing = TRUE)))

# Create a histogram 
g <- ggplot(life_meaning_long, aes(x = Choice, fill = country))
g+geom_bar(aes(fill=country), width = .5) +
  scale_fill_viridis_d() +
  labs(title = "Total Frequency of Life Meaning Topics by Country",
       x = "Choice Category",
       y = "Total Frequency",
       fill = "Country") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, vjust = .6))+
  theme(legend.position = "right",
        plot.title = element_text(hjust = .5, face = "bold"))

```
Reasoning: For this visualization, I chose a histogram as it displays categorical variables with frequencies of each choice category. It allows viewers to see the relative distribution of each choice category while also allowing us to see the corresponding countries to each choice category. I also wanted to make sure the groups do not have overlapping intervals so the bin values utilized is easier to distinguish between each country.For accessibility, I utilized the viridis palette which is color-blind friendly. I did omit the ranking of each choice category by country so that the visualization can focus on the overall frequency rather than how it was ranked. For this particular visualization, I wanted to display the total frequency of choice category variables to showcase the most prominent values of a satisfying life. 

## 4 - Meaning of life - The app.
```{r}
#|label: Shiny App

#Move data to app data file
original_path <- "data/life_meaning.csv"
destination_folder <- "app1/data"
destination_path <- file.path(destination_folder, basename(original_path))

# Copy the file to the app1/data folder
file.copy(original_path, destination_path)

```

Deployed App: https://t1p1qw-megan0marguerite-hokama.shinyapps.io/app1/

## 5 - Meaning of life - The styled app.
```{r}
#|label: Styled App

#Move data to app data file
original_path <- "data/life_meaning.csv"
destination_folder <- "app2/data"
destination_path <- file.path(destination_folder, basename(original_path))

# Copy the file to the app2/data folder
file.copy(original_path, destination_path)


```

#Deployed App
https://t1p1qw-megan0marguerite-hokama.shinyapps.io/app2/
