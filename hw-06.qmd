---
title: "Homework 06"
author: "Megan Hokama"
format:
  html:
    embed-resources: true
toc: true
---

```{r}
#| label: setup
#| message: false

# load packages
# add packages as needed

if(!require(pacman))
  install.packages("pacman")

pacman::p_load(
  tidyverse,
  countdown,
  gt,
  readxl,
  gganimate,
  gifski,
  knitr,
  kableExtra,
  palmerpenguins,
  transformr,
  datasauRus,
  viridis,
  here
)

# set theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))

# set width of code output
options(width = 65)

# set figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 7, # 7" width
  fig.asp = 0.618, # the golden ratio
  fig.retina = 3, # dpi multiplier for displaying HTML output on retina
  fig.align = "center", # center align figures
  dpi = 300 # higher dpi, sharper image
)
```

## 1 - Country populations

```{r}
#| label: redo gganimate plot

#Read data
country_data <- read_csv("data/country-pop.csv")
head(country_data)

#Based on previous, skip = 4
country <- read_csv("data/country-pop.csv", skip = 4)|>
  janitor::clean_names()

country |>
  glimpse()

#Top 10 countries in 2020
top10 <- country[, c("country_name", "x2020")]|>
  arrange(desc(x2020)) |>
  head(55)

top10 |>
  glimpse()

top10 <- country|>  
  filter(country_name %in% c("China","India", "United States", "Indonesia",
                             "Pakistan", "Brazil", "Nigeria", "Bangladesh",
                             "Russian Federation", "Mexico"))

#Pivot data longer
top10year <- top10|>
  pivot_longer(cols = 5:65, names_to = "year",
               values_to = "population")|>
  select("country_name", "population", "year")|>
  mutate(year = substring(year, 2))|>
  mutate(year = as.numeric(year))|>
  group_by(year)|>
  arrange(year, -population)|>
  mutate(rank = 1:n())

top10year |>
  glimpse()

#Create animation plot 
staticplot <- ggplot(top10year, aes(rank, group = country_name,
fill = as.factor(country_name), color = as.factor(country_name))) +
  scale_fill_viridis(discrete = TRUE, option = "plasma")+
  geom_tile(aes(y = population/2,
                height = population,
                width = 0.9), alpha = 0.8, color = "black") +
  geom_text(aes(y = 0, label = paste(country_name, " ")), vjust = 0.4, hjust = 1) +
  geom_text(aes(y = population, label = population, hjust = 0)) +
  coord_flip(clip = "off", expand = FALSE) +
  scale_y_continuous(labels = scales::comma) +
  scale_x_reverse() +
  enter_fade()+
  exit_fade()+
  guides(color = "none", fill = "none") +
  theme(axis.line = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        legend.position = "none",
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.grid.major.x = element_line(linewidth = 0.1, color = "grey"),
        panel.grid.minor.x = element_line(linewidth = 0.1, color = "grey"),
        plot.title = element_text(size = 25, hjust = 0.5, face = "bold", colour = "black", vjust = -1),
        plot.subtitle = element_text(size = 15, hjust = 0.5, face = "italic", color = "black"),
        plot.caption = element_text(size = 10, hjust = 0.5, face = "italic", color = "black"),
        plot.background = element_blank(),
        plot.margin = margin(2, 2, 10, 4, "cm"))

anim <- staticplot + transition_states(year, transition_length = 4, state_length = 1) +
  view_follow(fixed_x = TRUE)  +
  labs(title = 'Population per Year with Top 10 Countries : {closest_state}',
       caption  = "Population | Data Source: The World Bank")

#Create gif
animate(anim, 200, fps = 20,  width = 1200, height = 1000,
        renderer = gifski_renderer("gganim.gif"))
```
I referenced https://www.r-bloggers.com/2020/01/how-to-create-bar-race-animation-charts-in-r/. This helped me develop a gif that shows the top 10 countries populations over time.

## 2 - Meaning of life - The data.
```{r}
#|label: Create dataset

# Create a data frame referencing the data visualization
life_meaning <- data.frame(
  country = c("Australia", "New Zealand", "Sweden", "France", "Greece", 
              "Germany", "Canada", "Singapore", "Italy", "Netherlands", 
              "Belgium", "Japan", "UK", "U.S.", "Spain", "South Korea", 
              "Taiwan"),
  First_Choice = c("Family", "Family", "Family", "Family", "Family", 
                   "Family", "Family", "Family", "Family/Occupation", 
                   "Family", "Family", "Family", "Family", "Family", 
                   "Health", "Material well-being", "Society"),
  Second_Choice = c("Occupation", "Occupation", "Occupation", "Occupation", 
                    "Occupation", "Occupation/Health", "Occupation", 
                    "Occupation", "Family/Occupation", "Material well-being", 
                    "Material well-being", "Material well-being", "Friends", 
                    "Friends", "Material well-being", "Health", 
                    "Material well-being"),
  Third_Choice = c("Friends", "Friends", "Friends", "Health", "Health", 
                   "Occupation/Health", "Material well-being", "Society", 
                   "Material well-being", "Health", "Occupation", 
                   "Occupation/Health", "Hobbies", "Hobbies", "Occupation", 
                   "Family", "Family"),
  Fourth_Choice = c("Material well-being", "Material well-being", 
                    "Material well-being/Health", "Material well-being", 
                    "Friends", "Material well-being/General Positive", 
                    "Friends", "Material well-being", "Health", "Friends", 
                    "Health", "Occupation/Health", "Occupation", "Occupation", 
                    "Family", "General Positive", "Freedom"),
  Fifth_Choice = c("Society", "Society", "Material well-being/Health", 
                   "Friends", "Hobbies", "Material well-being/General Positive", 
                   "Society", "Friends", "Friends", "Occupation", "Friends", 
                   "Hobbies", "Health", "Faith", "Society", "Society/Freedom", 
                   "Hobbies")
)

# Save the data frame to a CSV file in the data folder
write.csv(life_meaning, file = "data/life_meaning.csv", row.names = FALSE)
read.csv()

```


## 3 - Meaning of life - The visualization.
```{r}
#|label: Create alternative visualization




## 4 - Meaning of life - The app.


## 5 - Meaning of life - The styled app.